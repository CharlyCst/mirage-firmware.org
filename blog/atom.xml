<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://miralis-firmware.github.io/blog</id>
    <title>Miralis Blog</title>
    <updated>2024-07-01T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://miralis-firmware.github.io/blog"/>
    <subtitle>Miralis Blog</subtitle>
    <icon>https://miralis-firmware.github.io/favicon/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Hello, world!]]></title>
        <id>https://miralis-firmware.github.io/blog/hello-world</id>
        <link href="https://miralis-firmware.github.io/blog/hello-world"/>
        <updated>2024-07-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I am glad to announce that today we open-sourced Miralis, a project I have been working on for the last six months together with some awesome people!]]></summary>
        <content type="html"><![CDATA[<p>I am glad to announce that today we open-sourced <a href="https://github.com/charlycst/miralis" target="_blank" rel="noopener noreferrer">Miralis</a>, a project I have been working on for the last six months together with some awesome people!
We are still in the very early days, but I think we already built something quite interesting, and I am looking forward to continue developing Miralis in the open.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-achilles-heel-of-the-compute-infrastructure">The Achilles' heel of the compute infrastructure<a class="hash-link" aria-label="Direct link to The Achilles' heel of the compute infrastructure" title="Direct link to The Achilles' heel of the compute infrastructure" href="https://miralis-firmware.github.io/blog/hello-world#the-achilles-heel-of-the-compute-infrastructure">​</a></h2>
<p>The Miralis project started from the realisation that modern computers are built on top of two incompatible assumptions at the lowest level of the stack: the computer's firmware.
On one hand the firmware's responsibility is to manage and configure the hardware, it is often proprietary and presented as an opaque binary blob that needs to be installed on all machines.
On the other hand, the firmware recently gained a new role as the entity that enforces machine-wide security policies.
This is especially true with the rise of confidential computing (e.g. <a href="https://www.arm.com/architecture/security-features/arm-confidential-compute-architecture" target="_blank" rel="noopener noreferrer">ARM CCA</a> or RISC-V's <a href="https://keystone-enclave.org/" target="_blank" rel="noopener noreferrer">Keystone</a>), where the responsibility to provide isolation is shifted from the OS/hypervisor to the firmware.</p>
<p>The two roles of the firmware, managing the hardware and enforcing security policies, are fundamentally in tension with each other, or at least will be until hardware manufacturers agree to release the source of their firmware.
Until then, the security of the world's compute infrastructure has no choice but to rely on opaque binary blobs.</p>
<p>With Miralis we would like to propose something different.
We acknowledge the need for proprietary firmware but we do not want to rely on it for security.
Rather, we propose to deprivilege proprietary firmware and to enforce strong isolation policies to decouple the security of the rest of the computing stack from the correctness (and cooperation) of opaque firmware.
We understand that requiring firmware changes would be disruptive, therefore we propose to execute unmodified firmware by virtualising and sandboxing the lowest privilege level on the machine.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="miralis-in-a-nutshell">Miralis in a nutshell<a class="hash-link" aria-label="Direct link to Miralis in a nutshell" title="Direct link to Miralis in a nutshell" href="https://miralis-firmware.github.io/blog/hello-world#miralis-in-a-nutshell">​</a></h2>
<p>In short Miralis is RISC-V security monitor that virtualises M-mode software.
By "virtualise M-mode software" I mean that Miralis can run deprivileged M-mode software transparently, like it would execute on a bare metal RISC-V machine.
As a quick summary for people new to RISC-V, the RISC-V architecture exposes up to three privilege modes (ignoring the hypervisor extension): user mode (U-mode, for applications), supervisor mode (S-mode, for the OS kernel), and machine mode (M-mode, for the firmware).</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        ┌──────────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">U-mode  │   User App   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ├──────────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">S-mode  │      OS      │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ├──────────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">M-mode  │   Firmware   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        └──────────────┘</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>With Miralis we make it possible to execute firmware in a virtual M-mode.
In practice we run the firmware in U-mode under the control of Miralis.
This makes it possible to sandbox M-mode software, which how we protect the rest of the stack from untrusted firmware, while running the OS natively at full speed.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        ┌──────────────┐ ┌────────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">U-mode  │   User App   │ │  Firmware  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ├──────────────┤ └────────────┘</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">S-mode  │      OS      │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ├──────────────┴──────────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">M-mode  │           Miralis           │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        └─────────────────────────────┘</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The firmware is virtualised using a classical trap &amp; emulate approach: most of the instructions are executed natively by the processor, but privileged instructions trap to Miralis which will emulate them in software (while enforcing security invariants).</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="current-status">Current status<a class="hash-link" aria-label="Direct link to Current status" title="Direct link to Current status" href="https://miralis-firmware.github.io/blog/hello-world#current-status">​</a></h2>
<p>The project started six months ago, slowly at first but we are now making progress at a steady pace.
The initial focus was on the software architecture, to make the project modular and as future proof as we could anticipate.
The main components of Miralis are in place.
This include for instance the instruction decoder, instruction emulation, virtual contexts, and context switching.
The code base is modular over the platform (to support multiple boards and SoCs in the future) and the architecture (to support, e.g., running Miralis in user-space for unit and integration testing).</p>
<p>We do not yet support a wide variety of workloads, but we do have a solid foundation.
Miralis can already boot an unmodified <a href="https://github.com/riscv-software-src/opensbi" target="_blank" rel="noopener noreferrer">OpenSBI</a> in virtual M-mode (that is physical U-mode) with a simple payload. We also experimented with other firmware, such as <a href="https://zephyrproject.org/" target="_blank" rel="noopener noreferrer">Zephyr</a> for which we have early support.</p>
<p>I would like use this opportunity to thank all the people who contributed to the Miralis project, especially my awesome colleague Neelu who helped design Miralis, Abel who achieved a tremendous amount of work over the last semester and actually took Miralis to the place it is today, and François who recently joined the effort and made some great contributions.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-next">What is next<a class="hash-link" aria-label="Direct link to What is next" title="Direct link to What is next" href="https://miralis-firmware.github.io/blog/hello-world#what-is-next">​</a></h2>
<p>This summer we will focus on delivering on the Miralis promises, in particular by focusing on full Linux support and porting Miralis to physical boards in addition to our current QEMU support.
We will also explore new approaches to deliver best-in-class security, in particular through an innovative take a formally verifying crucial pieces of Miralis, a subject I would like to discuss more in the near future.</p>
<p>Over the summer Sofia and Noé will be joining forces, I'm sure we will be able to achieve a lot by working together and I am looking forward to see how far we can go with Miralis, with the ultimate goal to help secure the foundations of the world's compute infrastructure.</p>]]></content>
        <author>
            <name>Charly Castes</name>
            <uri>https://charlycst.github.io</uri>
        </author>
        <category label="News" term="News"/>
    </entry>
</feed>